{"name": "test_open_vwo_login", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.NoSuchWindowException: Message: no such window: target window already closed\nfrom unknown error: web view not found\n  (Session info: chrome=129.0.6668.101)\nStacktrace:\n\tGetHandleVerifier [0x00007FF717D5B095+29557]\n\t(No symbol) [0x00007FF717CCFA50]\n\t(No symbol) [0x00007FF717B8B56A]\n\t(No symbol) [0x00007FF717B5FCC5]\n\t(No symbol) [0x00007FF717C0EE07]\n\t(No symbol) [0x00007FF717C27E21]\n\t(No symbol) [0x00007FF717C06F33]\n\t(No symbol) [0x00007FF717BD116F]\n\t(No symbol) [0x00007FF717BD22D1]\n\tGetHandleVerifier [0x00007FF71808C96D+3378253]\n\tGetHandleVerifier [0x00007FF7180D8497+3688311]\n\tGetHandleVerifier [0x00007FF7180CD1CB+3642539]\n\tGetHandleVerifier [0x00007FF717E1A6B6+813462]\n\t(No symbol) [0x00007FF717CDAB5F]\n\t(No symbol) [0x00007FF717CD6B74]\n\t(No symbol) [0x00007FF717CD6D10]\n\t(No symbol) [0x00007FF717CC5C1F]\n\tBaseThreadInitThunk [0x00007FFADED7257D+29]\n\tRtlUserThreadStart [0x00007FFADF7EAF28+40]", "trace": "def test_open_vwo_login():\n        driver = webdriver.Chrome()  # Create the session\n        driver.get(\"https://app.vwo.com/#/login\")  # Navigate to URL\n>       assert driver.title == \"Login - VWO\"\n\nsrc\\ex_17102024\\test_Lab05.py:8: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:374: in title\n    return self.execute(Command.GET_TITLE).get(\"value\", \"\")\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:354: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000001A9BCE636E0>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"no such window\",\"message\":\"no such window: target window already closed\\\\...07FF717CC5C1F]\\\\n\\\\tBaseThreadInitThunk [0x00007FFADED7257D+29]\\\\n\\\\tRtlUserThreadStart [0x00007FFADF7EAF28+40]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.NoSuchWindowException: Message: no such window: target window already closed\nE       from unknown error: web view not found\nE         (Session info: chrome=129.0.6668.101)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00007FF717D5B095+29557]\nE       \t(No symbol) [0x00007FF717CCFA50]\nE       \t(No symbol) [0x00007FF717B8B56A]\nE       \t(No symbol) [0x00007FF717B5FCC5]\nE       \t(No symbol) [0x00007FF717C0EE07]\nE       \t(No symbol) [0x00007FF717C27E21]\nE       \t(No symbol) [0x00007FF717C06F33]\nE       \t(No symbol) [0x00007FF717BD116F]\nE       \t(No symbol) [0x00007FF717BD22D1]\nE       \tGetHandleVerifier [0x00007FF71808C96D+3378253]\nE       \tGetHandleVerifier [0x00007FF7180D8497+3688311]\nE       \tGetHandleVerifier [0x00007FF7180CD1CB+3642539]\nE       \tGetHandleVerifier [0x00007FF717E1A6B6+813462]\nE       \t(No symbol) [0x00007FF717CDAB5F]\nE       \t(No symbol) [0x00007FF717CD6B74]\nE       \t(No symbol) [0x00007FF717CD6D10]\nE       \t(No symbol) [0x00007FF717CC5C1F]\nE       \tBaseThreadInitThunk [0x00007FFADED7257D+29]\nE       \tRtlUserThreadStart [0x00007FFADF7EAF28+40]\n\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: NoSuchWindowException"}, "start": 1729262331835, "stop": 1729262338956, "uuid": "4210c15d-7e0a-4f46-b54f-77e0a938b77d", "historyId": "52c11e4e4dab45f5f134285201be64a8", "testCaseId": "52c11e4e4dab45f5f134285201be64a8", "fullName": "src.ex_17102024.test_Lab05#test_open_vwo_login", "labels": [{"name": "parentSuite", "value": "src.ex_17102024"}, {"name": "suite", "value": "test_Lab05"}, {"name": "host", "value": "JyotsnaSree"}, {"name": "thread", "value": "15128-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "src.ex_17102024.test_Lab05"}]}